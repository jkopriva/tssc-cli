---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name: e2e-periodic-pipeline
  namespace: rhtap-shared-team-tenant
  labels:
    appstudio.openshift.io/component: tssc-cli
    appstudio.openshift.io/application: tssc-cli
spec:
  description: |-
    Pipeline for periodic testing with multiple configurations generated from PICT file.
    This pipeline processes PICT combinations and creates multiple test configurations.
  params:
    - name: SNAPSHOT
      description: "The JSON string representing the snapshot of the application under test."
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - name: konflux-test-infra-secret
      description: The name of secret where testing infrastructures credentials are stored.
      type: string
    - name: cloud-credential-key
      description: The key secret from konflux-test-infra-secret where all AWS ROSA configurations are stored.
      type: string
    - name: ocp-instance-type
      description: 'The type of machine to use for the cluster nodes.'
      default: "m5.2xlarge"
      type: string
    - name: ocp-replicas
      description: 'The number of replicas for the cluster nodes.'
      default: "3"
      type: string
  tasks:
    - name: test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/konflux-qe-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: common/tasks/test-metadata/0.2/test-metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: test-name
          value: $(context.pipelineRun.name)

    - name: process-periodic-configs
      taskSpec:
        volumes:
          - name: shared-data
            emptyDir: {}
        results:
          - name: rhads-config
            description: JSON formatted configuration data (array of configs from PICT)
        steps:
          - name: download-pict-file
            image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
            env:
              - name: JOB_SPEC
                value: $(tasks.test-metadata.results.job-spec)
            volumeMounts:
              - name: shared-data
                mountPath: /shared
            script: |
              #!/usr/bin/env bash
              set -euo pipefail

              echo "Using periodic configurations generated from PICT"
              # Download periodic.pict file
              curl -o /shared/periodic.pict https://raw.githubusercontent.com/jkopriva/tssc-cli/refs/heads/RHTAP-5290/integration-tests/config/periodic/periodic.pict
              cat /shared/periodic.pict
          - name: generate-pict-output
            image: quay.io/apodhrad/pict:latest
            volumeMounts:
              - name: shared-data
                mountPath: /shared
            script: |
              #!/usr/bin/env bash
              set -euo pipefail
              echo "Running PICT to generate test configurations..."
              cd /shared
              pict periodic.pict -r -o:1 > pict_output.txt
              cat pict_output.txt
          - name: process-config
            image: quay.io/konflux-ci/appstudio-utils:ab6b0b8e40e440158e7288c73aff1cf83a2cc8a9@sha256:24179f0efd06c65d16868c2d7eb82573cce8e43533de6cea14fec3b7446e0b14
            volumeMounts:
              - name: shared-data
                mountPath: /shared
            script: |
              #!/usr/bin/env bash
              set -euo pipefail

              echo "Converting PICT output to RHADS configuration format..."
              cd /shared
              # Debug: Check if pict_output.txt exists and show its content
              if [[ ! -f pict_output.txt ]]; then
                echo "ERROR: pict_output.txt not found!"
                ls -la /shared/
                exit 1
              fi
              echo "Content of pict_output.txt:"
              cat pict_output.txt
              echo "--- End of pict_output.txt ---"
              # Download testplan template
              echo "Downloading testplan template..."
              curl -o testplan_template.json https://raw.githubusercontent.com/jkopriva/tssc-cli/refs/heads/RHTAP-5290/integration-tests/config/periodic/testplan_template.json
              if [[ ! -f testplan_template.json ]]; then
                echo "ERROR: Failed to download testplan_template.json"
                exit 1
              fi
              echo "Testplan template content:"
              cat testplan_template.json
              # Convert PICT output to multiple RHADS configurations
              CONFIG_COUNT=0
              OUTPUT_FILE="/tmp/rhads_output.txt"
              > "$OUTPUT_FILE"  # Initialize empty file
              while IFS=$'\t' read -r -a fields; do
                echo "Processing line: ${fields[*]}"
                if [[ "${fields[0]}" != "OCP" && -n "${fields[0]:-}" ]]; then  # Skip header line and empty lines
                  if [[ $CONFIG_COUNT -gt 0 ]]; then
                    echo "---CONFIG_SEPARATOR---" >> "$OUTPUT_FILE"
                  fi
                  # Build RHADS config format for this PICT line
                  echo "OCP=\"${fields[0]:-4.18}\"" >> "$OUTPUT_FILE"
                  echo "AUTH=\"${fields[1]:-github}\"" >> "$OUTPUT_FILE"
                  echo "ACS=\"${fields[2]:-new}\"" >> "$OUTPUT_FILE"
                  echo "REGISTRY=\"${fields[3]:-quay.io}\"" >> "$OUTPUT_FILE"
                  echo "TPA=\"${fields[4]:-new}\"" >> "$OUTPUT_FILE"
                  echo "SCM=\"${fields[5]:-github}\"" >> "$OUTPUT_FILE"
                  echo "PIPELINE=\"${fields[6]:-tekton}\"" >> "$OUTPUT_FILE"
                  # Generate corresponding testplan
                  echo "---TESTPLAN_START---" >> "$OUTPUT_FILE"
                  # Extract values for testplan
                  SCM_VALUE="${fields[5]:-github}"
                  PIPELINE_VALUE="${fields[6]:-tekton}"
                  REGISTRY_VALUE="${fields[3]:-quay.io}"
                  TPA_VALUE="${fields[4]:-new}"
                  ACS_VALUE="${fields[2]:-new}"
                  # Create testplan by replacing placeholders in template more precisely
                  sed "s/\"git\": \"github\"/\"git\": \"$SCM_VALUE\"/g; s/\"ci\": \"tekton\"/\"ci\": \"$PIPELINE_VALUE\"/g; s/\"registry\": \"quay.io\"/\"registry\": \"$REGISTRY_VALUE\"/g; s/\"tpa\": \"local\"/\"tpa\": \"$TPA_VALUE\"/g; s/\"acs\": \"local\"/\"acs\": \"$ACS_VALUE\"/g" testplan_template.json >> "$OUTPUT_FILE"
                  echo "---TESTPLAN_END---" >> "$OUTPUT_FILE"
                  CONFIG_COUNT=$((CONFIG_COUNT + 1))
                  echo "Generated configuration $CONFIG_COUNT with testplan"
                else
                  echo "Skipping line: ${fields[*]}"
                fi
              done < pict_output.txt
              echo "Generated $CONFIG_COUNT RHADS configurations with testplans"
              # Copy output to result path
              echo "Final output:"
              cat "$OUTPUT_FILE"
              cat "$OUTPUT_FILE" > "$(results.rhads-config.path)"
              echo "Configuration processing completed successfully"
      runAfter:
        - test-metadata

    - name: start-periodic-pipelines
      runAfter:
        - test-metadata
        - process-periodic-configs
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/jkopriva/tssc-cli.git
          - name: revision
            value: RHTAP-5290
          - name: pathInRepo
            value: integration-tests/tasks/start-pipelines.yaml
      params:
        - name: snapshot
          value: $(params.SNAPSHOT)
        - name: job-spec
          value: $(tasks.test-metadata.results.job-spec)
        - name: rhads-config
          value: $(tasks.process-periodic-configs.results.rhads-config)
        - name: mode
          value: "periodic"
        - name: konflux-test-infra-secret
          value: $(params.konflux-test-infra-secret)
        - name: cloud-credential-key
          value: $(params.cloud-credential-key)
        - name: ocp-instance-type
          value: $(params.ocp-instance-type)
        - name: ocp-replicas
          value: $(params.ocp-replicas)
        - name: context-pipeline-run-name
          value: $(context.pipelineRun.name)
